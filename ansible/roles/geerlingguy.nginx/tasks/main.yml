---
# Variable setup.
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Define nginx_user.
  set_fact:
    nginx_user: "{{ __nginx_user }}"
  when: nginx_user is not defined

# Setup/install tasks.

- include: setup-Ubuntu.yml
  when: ansible_distribution == 'Ubuntu'

- include: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- name: Create Global Conf Directory
  file:
    path: /etc/nginx/global
    state: directory
    owner: root
    group: "{{ root_group }}"

- name: Create SSL Cert Directory
  file:
    path: /etc/nginx/ssl
    state: directory
    owner: root
    group: "{{ root_group }}"


- name: Copy SSL dhparam.pem into SSL directory
  copy:
    src: ssl-certificates/dhparam.pem
    dest: /etc/nginx/ssl/dhparam.pem
    mode: 0600
    owner: "{{ nginx_user }}"
    group: "{{ nginx_user }}"
    force: yes
  notify:
    - reload nginx

- name: Ensure logs folder exists within the user folder for each vhost
  file: >
    path="/home/{{ item.name }}/logs/"
    state=directory
    owner="{{ item.name }}"
    group="{{ nginx_user }}"
  with_items: "{{ users }}"
  register: logs_folder_info

# Vhost configuration.
- include: disable-vhosts.yml

- include: create-user-vhosts.yml
  with_items: "{{ users }}"
  loop_control:
    loop_var: user

# Nginx setup.
- name: Copy nginx configuration in place.
  template:
    src: nginx.conf.j2
    dest: "{{ nginx_conf_file_path }}"
    owner: root
    group: "{{ root_group }}"
    mode: 0644
    force: yes
  notify:
    - reload nginx

# Wordpress Conf setup.
- name: Copy wordpress configuration in place.
  template:
    src: wordpress.conf.j2
    dest: "{{ nginx_wordpress_conf_path }}"
    owner: root
    group: "{{ root_group }}"
    mode: 0644
    force: yes
  notify:
    - reload nginx

# Staging-protect setup.
- name: Copy staging-protect configuration in place.
  template:
    src: staging-protect.conf.j2
    dest: "{{ nginx_staging_protect_conf_path }}"
    owner: root
    group: "{{ root_group }}"
    mode: 0644
    force: yes
  when: "http.auth_password is defined"
  notify:
    - reload nginx

# Copy robots.txt into root folder
- name: Copy global robots.txt file into /var/www/html
  template:
    src: robots.txt.j2
    dest: "/var/www/html/"
    owner: "{{ __nginx_user }}"
    group: "{{ __nginx_user }}"
    mode: 0644
    force: yes

# Manage Nginx service
- name: Ensure nginx is started and enabled to start at boot.
  service:
    name: nginx
    state: started
    enabled: yes

- name: Create staging password entry
  htpasswd:
    path: /etc/nginx/passwd
    name: "{{ http.auth_username }}"
    password: "{{ http.auth_password }}"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_user }}"
    mode: 0640
  when: "http.auth_password is defined"
